#!/usr/bin/env bash

set -eu

# This script performs the buildpack transformation. BUILD_DIR will be the location of the app and CACHE_DIR will be a location the buildpack can use to cache build artifacts between builds.
# ENV_DIR is a directory that contains a file for each of the applicationâ€™s configuration variables. Config vars are made available as environment variables during execution of commands specified in the Procfile, as well as when running one-off processes.
# See https://devcenter.heroku.com/articles/buildpack-api#bin-compile for additional documentation

# Default location for sops release downloads
PACKAGE_LOCATION="https://github.com/mozilla/sops/releases/download"

# Expected environment variable coming from Heroku. See: https://devcenter.heroku.com/articles/buildpack-api#bin-compile-usage
declare BUILD_DIR

# Expected environment variable coming from Heroku. See: https://devcenter.heroku.com/articles/buildpack-api#bin-compile-usage
declare CACHE_DIR

# Expected environment variable coming from Heroku. See: https://devcenter.heroku.com/articles/buildpack-api#bin-compile-usage
declare ENV_DIR

# These are dynamic variables that the script needs to be set in the configuration vars in order to proceed. See the following sources for additional information:
# * https://devcenter.heroku.com/articles/buildpack-api#bin-compile-summary
# * https://devcenter.heroku.com/articles/config-vars
declare -a SOPS_VARIABLES=(
  "SOPS_VERSION"
)

# These variable is used as a means of communicating PATH changes in the subsequent .profile.d scripts.
# See https://devcenter.heroku.com/articles/buildpack-api#profile-d-scripts for additional documentation
declare SOPS_BIN

# Parsing the expected arguments from Heroku in order to set the first three variables declared at the global scope
# Any failure in this script indicates a significant change to buildpacks on Heroku
function parse_args {
  echo "---> Parsing expected arguments from Heroku"

  if [[ $# > 3 ]]; then
    echo "-----> Heroku has changed the arguments passed, unable to proceed"
    exit $((1 + $#))
  fi

  BUILD_DIR=$1
  CACHE_DIR=$2
  ENV_DIR=$3
}

# This function handles a read of the SOPS_VERSION from the ENV_DIR passed to the script
# This will fail if any of the variables in SOPS_VARIABLES are unset in the config vars for the application
function read_sops_version {
  echo "---> Processing required environment configuration"
  local variable_dir=$1

  if [[ -d ${variable_dir} ]]; then
    for variable in "${SOPS_VARIABLES[@]}"; do
      local location="${variable_dir}/${variable}"

      if [ ! -f $location ]; then
        echo "-----> $variable not detected in environment, unable to proceed"
        echo "-----> Please add $variable to the application config vars"
        exit 1
      fi

      export "$variable=$(cat $location)"
    done
  fi
}

# This handles the installation of sops. If a version of sops already exists in the CACHE_DIR, no new install will be conducted
# Once sops is installed, the artifacts will be moved into a location where we can source them into the PATH
function install_sops {
  echo "---> Beginning sops install, or cache lookup"

  local build_location=$1
  local cache_location=$2
  local version=$3
  local file="${cache_location}/sops_${version}"

  mkdir -p "${cache_location}"
  if [ ! -e $file ]; then
    echo "-----> Installing sops version ${SOPS_VERSION}"
  
    curl --silent -L ${PACKAGE_LOCATION}/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux --output sops

    chmod +x sops
    mv sops bin/
  fi

  SOPS_BIN="${build_location}/.sops-buildpack/"
  mkdir -p "${SOPS_BIN}"
  cp $file "${SOPS_BIN}/sops"
}

# Sets up the PATH modification scripts so that the sops commands can be executed easily
function prepare_environment {
  echo "---> Preparing environment for compatibility"

  local build_location=$1
  local bin=$2
  local profile_location="${build_location}/.profile.d"

  mkdir -p "${profile_location}"
  echo 'export PATH="$PATH:$bin"' >> $profile_location/sops.sh
}

# Handles orchestrating of the build steps for the script
function main {
  echo "-> sops buildpack compilation starting"
  parse_args "$@"
  read_sops_version $ENV_DIR
  install_sops $BUILD_DIR $CACHE_DIR $SOPS_VERSION
  prepare_environment $BUILD_DIR $SOPS_BIN
  echo "-> sops buildpack compilation complete"
}

main "$@"